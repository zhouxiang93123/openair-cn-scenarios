################################################################################
# Licensed to the OpenAirInterface (OAI) Software Alliance under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The OpenAirInterface Software Alliance licenses this file to You under 
# the Apache License, Version 2.0  (the "License"); you may not use this file
# except in compliance with the License.  
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#-------------------------------------------------------------------------------
# For more information about the OpenAirInterface (OAI) Software Alliance:
#      contact@openairinterface.org
################################################################################

# file build_helper
# brief
# author Laurent Thomas, Lionel GAUTHIER
#
#######################################
SUDO='sudo -S -E'

###############################
## echo and  family
###############################
black='\E[30m'
red='\E[31m'
green='\E[32m'
yellow='\E[33m'
blue='\E[1;34m'
magenta='\E[35m'
cyan='\E[36m'
white='\E[37m'
reset_color='\E[00m'
COLORIZE=1

cecho()  {  
    # Color-echo
    # arg1 = message
    # arg2 = color
    local default_msg="No Message."
    message=${1:-$default_msg}
    color=${2:-$green}
    [ "$COLORIZE" = "1" ] && message="$color$message$reset_color"
    echo -e "$message"
    return
}

echo_error()   { cecho "$*" $red          ;}
echo_fatal()   { cecho "$*" $red; exit -1 ;}
echo_warning() { cecho "$*" $yellow       ;}
echo_success() { cecho "$*" $green        ;}
echo_info()    { cecho "$*" $blue         ;}



###########################
# Cleaners
###########################

clean_kernel() {
    $SUDO modprobe ip_tables
    $SUDO modprobe x_tables
    $SUDO iptables -P INPUT ACCEPT
    $SUDO iptables -F INPUT
    $SUDO iptables -P OUTPUT ACCEPT
    $SUDO iptables -F OUTPUT
    $SUDO iptables -P FORWARD ACCEPT
    $SUDO iptables -F FORWARD
    $SUDO iptables -t nat -F
    $SUDO iptables -t mangle -F
    $SUDO iptables -t filter -F
    $SUDO iptables -t raw -F
    echo_info "Flushed iptables"
}

clean_all_files() {
 set_openair_env
 dir=$OPENAIRCN_DIR/BUILD
 rm -rf $dir/LOG $OPENAIR_DIR/targets/bin/* 
 rm -rf $dir/EPC/BUILD $dir/EPC/CMakeLists.txt
 rm -rf $dir/MME/BUILD $dir/MME/CMakeLists.txt
 rm -rf $dir/HSS/BUILD
 rm -rf $dir/AUTOTESTS/BIN $dir/AUTOTESTS/LOG $dir/AUTOTESTS/*/BUILD 
}

###################################
# Compilers
###################################
# arg 1 Build directory OPENAIR_DIR/BUILD/?
# arg 2 Executable target name
# arg 3 Executable name (no path)
# arg 4 Verbose         (1 or 0)
compilations() {
  cd $OPENAIRCN_DIR/BUILD/$1/BUILD
  if [ "a$4" == "a1" ]; then 
    {
      rm -f $3
      make $make_args $2
    } | tee $dlog/$2.txt 
  else
    {
      rm -f $3
      make $make_args $2
    } > $dlog/$2.txt 2>&1
  fi
  if [ -s $3 ] ; then
     echo_success "$2 compiled"
  else
     echo_error "$2 compilation failed"
  fi
}


##########################################
# X.509 certificates
##########################################

make_one_cert() {
  fqdn=$1
  name=$2
  $SUDO openssl genrsa -out $name.key.pem 1024
  $SUDO openssl req -new -batch -out $name.csr.pem -key $name.key.pem -subj /CN=$name.$fqdn/C=FR/ST=PACA/L=Aix/O=Eurecom/OU=CM
  $SUDO openssl ca -cert cacert.pem -keyfile cakey.pem -in $name.csr.pem -out $name.cert.pem -outdir . -batch
}

make_certs(){
    
  fqdn=$1
  certs_dir=$FREEDIAMETER_PREFIX/freeDiameter
  # certificates are stored in diameter config directory
  if [ ! -d $certs_dir ];  then
    echo "Creating non existing directory: $certs_dir"
    $SUDO mkdir -p $certs_dir || echo_error "can't create: $certs_dir"
  fi

  cd $certs_dir
  echo "creating the CA certificate"
  echo_warning "erase all existing certificates as long as the CA is regenerated"
  $SUDO rm -f $certs_dir/*.pem
  $SUDO mkdir -p  $certs_dir/demoCA/
  $SUDO touch $certs_dir/demoCA/index.txt
  $SUDO sh -c "echo 01 > $certs_dir/demoCA/serial"

  # CA self certificate
  $SUDO openssl req  -new -batch -x509 -days 3650 -nodes -newkey rsa:1024 -out cacert.pem -keyout cakey.pem -subj /CN=$fqdn/C=FR/ST=PACA/L=Aix/O=Eurecom/OU=CM
    
  # generate hss certificate and sign it
  make_one_cert eur hss
  make_one_cert eur mme

  # legacy config is using a certificate named 'user'
  make_one_cert eur user
}


# arg1 is force (no interactive script)
install_xtables_addons_oai() {
  if [ $1 -eq 0 ]; then
    read -p "Do you want to install xtables_addons_oai ? <y/N> " prompt
    rm_option=I
    OPTION="-y"
  else
    prompt='y'
    rm_option=f
    OPTION="-y"
  fi
  PACKAGE_LIST="\
    autoconf  \
    automake  \
    build-essential \
    dkms \
    iptables \
    iptables-dev \
    linux-headers-`uname -r`"
  $SUDO apt-get install $OPTION $PACKAGE_LIST

  if [[ $prompt =~ [yY](es)* ]]
  then    
    cd ~
    if [ -d xtables-addons-oai ]; then
      echo_warning "Will remove $PWD/xtables-addons-oai"
      $SUDO rm -rv -$rm_option xtables-addons-oai
      $SUDO rm -rv -$rm_option xtables-addons-oai
    fi
    echo "Downloading xtables-addons-oai source code"
    git clone https://gitlab.eurecom.fr/oai/xtables-addons-oai.git
    #git clone git@gitlab.eurecom.fr:oai/xtables-addons-oai.git
    chmod -R o+w xtables-addons-oai
    chmod -R g+w xtables-addons-oai
    cd xtables-addons-oai/
    sync
    $SUDO autoreconf --install --force
    $SUDO ./configure 
    $SUDO make
    $SUDO make install
    cd /lib/modules/`uname -r`
    $SUDO depmod -a
  fi
}

############################################
# External packages installers
############################################

# This function is for internal use of EURECOM developers (no support)
# arg1 is force (no interactive script)
install_netmap() {
  if [ $1 -gt 0 ]; then 
    OPTION="-y"
  else
    OPTION=""
  fi
  
  # Compilers, generators, ...
  $SUDO apt-get install $OPTION \
    autoconf  \
    automake  \
    build-essential \
    linux-source \
    qt4-dev-tools

  if [ $1 -eq 0 ]; then
    read -p "Do you want to install netmap ? <y/N> " prompt
  else
    prompt='y'
  fi
  if [[ $prompt =~ [yY](es)* ]]
  then
    # TODO: check operations
    current_kernel_release=`uname -r | cut -d '-' -f1`
    if [ ! -f /usr/src/linux-source-"$current_kernel_release"/"$current_kernel_release"/.config ]; then
      if [ ! -f /usr/src/linux-source-"$current_kernel_release"/"$current_kernel_release" ]; then
        echo "Untar kernel source code"
        cd /usr/src/linux-source-"$current_kernel_release"
        tar xjf *.tar.bz2
      fi
      cd linux-source-"$current_kernel_release"
      $SUDO make oldconfig
      $SUDO make
      $SUDO make install
      # TODO: check CONFIG_VIRTIO_NET=m for full performance 
      echo_fatal "Please reboot your computer on the new installed kernel (do your own stuff in grub.cfg): $current_kernel_release"
    fi
       
    echo "Downloading netmap"
    cd $OPENAIRCN_DIR/..
    git clone https://github.com/luigirizzo/netmap.git
    cd netmap
    ./configure --kernel-sources=/usr/src/linux-source-"$current_kernel_release"/"$current_kernel_release"
  fi
}
# arg1 is force (no interactive script)
install_nettle_from_source() {
  if [ $1 -gt 0 ]; then 
    OPTION="-y"
  else
    OPTION=""
  fi
  
  # Compilers, generators, ...
  $SUDO apt-get install $OPTION \
    autoconf  \
    automake  \
    build-essential

  if [ $1 -eq 0 ]; then
    read -p "Do you want to install nettle ? <y/N> " prompt
  else
    prompt='y'
  fi
  if [[ $prompt =~ [yY](es)* ]]
  then    
    cd /tmp
    echo "Downloading nettle archive"
    rm -rf /tmp/nettle-2.5.tar.gz* /tmp/nettle-2.5
    wget ftp://ftp.lysator.liu.se/pub/security/lsh/nettle-2.5.tar.gz 
    tar -xzf nettle-2.5.tar.gz
    cd nettle-2.5/
    ./configure --disable-openssl --enable-shared --prefix=/usr 
    echo "Compiling nettle"
    make -j4
    make check 
    $SUDO make install 
    rm -rf /tmp/nettle-2.5.tar.gz /tmp/nettle-2.5
  fi
}

# arg1 is force (no interactive script)
install_gnutls_from_source(){
  if [ $1 -gt 0 ]; then 
    OPTION="-y"
  else
    OPTION=""
  fi
  
  # Compilers, generators, ...
  $SUDO apt-get install $OPTION \
    autoconf  \
    automake  \
    build-essential

  if [ `lsb_release -rs` = '14.04' ]; then
    # not sure about libidn2-0-dev vs libidn11-dev, check symbols
    PACKAGE_LIST="\
      libtasn1-6-dev \
      libtasn1-6-dbg \
      libp11-kit-dev \
      libp11-kit0-dbg \
      libtspi-dev \
      libtspi1 \
      libidn2-0-dev \
      libidn11-dev"
    $SUDO apt-get install $OPTION $PACKAGE_LIST
    if [ $? -ne 0 ]; then 
      echo_fatal "Failed to install package list $PACKAGE_LIST"
    fi 
  fi

    
  if [ $1 -eq 0 ]; then
    read -p "Do you want to install GNU TLS ? <y/N> " prompt
  else
    prompt='y'
  fi
  if [[ $prompt =~ [yY](es)* ]]
  then    
    cd /tmp 
    echo "Downloading gnutls archive"
    rm -rf /tmp/gnutls-3.1.23.tar.xz* /tmp/gnutls-3.1.23
    wget ftp://ftp.gnutls.org/gcrypt/gnutls/v3.1/gnutls-3.1.23.tar.xz 
    tar -xJf gnutls-3.1.23.tar.xz
    cd gnutls-3.1.23/
    ./configure --prefix=/usr
    echo "Compiling gnutls"
    make -j4
    $SUDO make install 
    rm -rf /tmp/gnutls-3.1.23.tar.xz /tmp/gnutls-3.1.23
  fi
}

# arg1 is force (no interactive script)
install_1.1.5_freediameter_from_source() {
  if [ $1 -eq 0 ]; then
    read -p "Do you want to install freeDiameter 1.1.5 ? <y/N> " prompt
    OPTION=""
  else
    prompt='y'
    OPTION="-y"
  fi

  # libpq-dev 'may' be not needed
  $SUDO apt-get install $OPTION \
    autoconf  \
    automake  \
    bison     \
    build-essential \
    cmake \
    cmake-curses-gui  \
    debhelper \
    flex  \
    g++ \
    gcc \
    gdb \
    libgcrypt-dev \
    libidn11-dev \
    libmysqlclient-dev \
    libpq-dev \
    libsctp1 \
    libsctp-dev \
    libxml2-dev \
    mercurial \
    python-dev \
    ssl-cert \
    swig

  if [[ $prompt =~ [yY](es)* ]]
  then    
    cd /tmp
    echo "Downloading 1.1.5 freeDiameter archive"
    rm -rf /tmp/1.1.5.tar.gz* /tmp/freeDiameter-1.1.5
    wget http://www.freediameter.net/hg/freeDiameter/archive/1.1.5.tar.gz 
    tar xzf 1.1.5.tar.gz
    cd freeDiameter-1.1.5
    patch -p1 < $OPENAIRCN_DIR/SRC/S6A/freediameter/freediameter-1.1.5.patch 
    mkdir build
    cd build
    cmake -DCMAKE_INSTALL_PREFIX:PATH=/usr ../ 
    echo "Compiling freeDiameter"
    make -j4
    #make test 
    $SUDO make install 
    rm -rf /tmp/1.1.5.tar.gz /tmp/freeDiameter-1.1.5
  fi
}

# arg1 is force (no interactive script)
install_freediameter_from_source() {
  if [ $1 -eq 0 ]; then
    read -p "Do you want to install freeDiameter 1.2.0 ? <y/N> " prompt
    OPTION=""
  else
    prompt='y'
    OPTION="-y"
  fi
  # libpq-dev 'may' be not needed
  $SUDO apt-get install $OPTION \
    autoconf  \
    automake  \
    bison     \
    build-essential \
    cmake \
    cmake-curses-gui  \
    debhelper \
    flex  \
    g++ \
    gcc \
    gdb \
    libgcrypt-dev \
    libidn11-dev \
    libmysqlclient-dev \
    libpq-dev \
    libsctp1 \
    libsctp-dev \
    libxml2-dev \
    mercurial \
    python-dev \
    ssl-cert \
    swig

  
  if [[ $prompt =~ [yY](es)* ]]
  then    
    cd /tmp
    echo "Downloading 1.2.0 freeDiameter archive"
    rm -rf /tmp/1.2.0.tar.gz* /tmp/freeDiameter-1.2.0
    wget http://www.freediameter.net/hg/freeDiameter/archive/1.2.0.tar.gz 
    tar xzf 1.2.0.tar.gz
    cd freeDiameter-1.2.0
    patch -p1 < $OPENAIRCN_DIR/SRC/S6A/freediameter/freediameter-1.2.0.patch 
    mkdir build
    cd build
    cmake -DCMAKE_INSTALL_PREFIX:PATH=/usr ../ 
    echo "Compiling freeDiameter"
    make -j4
    #make test 
    $SUDO make install 
    rm -rf /tmp/1.2.0.tar.gz /tmp/freeDiameter-1.2.0
  fi
}

# arg1 is force (no interactive script)
install_latest_freediameter_from_source() {
  if [ $1 -eq 0 ]; then
    read -p "Do you want to install latest freeDiameter ? <y/N> " prompt
    OPTION=""
  else
    prompt='y'
    OPTION="-y"
  fi
  
  # libpq-dev 'may' be not needed
  $SUDO apt-get install $OPTION \
    autoconf  \
    automake  \
    bison     \
    build-essential \
    cmake \
    cmake-curses-gui  \
    debhelper \
    flex  \
    g++ \
    gcc \
    gdb \
    libgcrypt-dev \
    libidn11-dev \
    libmysqlclient-dev \
    libpq-dev \
    libsctp1 \
    libsctp-dev \
    libxml2-dev \
    mercurial \
    python-dev \
    ssl-cert \
    swig
  
  if [[ $prompt =~ [yY](es)* ]]
  then    
    cd /tmp
    rm -rf /tmp/freeDiameter
    echo "Downloading latest freeDiameter trunk (may be unstable)"
    git clone https://github.com/Metaswitch/freeDiameter.git
    cd freeDiameter
    patch -p1 < $OPENAIRCN_DIR/SRC/S6A/freediameter/freediameter-1.2.0.patch 
    mkdir build
    cd build
    cmake -DCMAKE_INSTALL_PREFIX:PATH=/usr ../ 
    echo "Compiling freeDiameter"
    make -j4
    #make test 
    $SUDO make install 
    rm -rf /tmp/freeDiameter
  fi
}

# arg1 is package name
test_install_package() {
  # usage: test_install_package package_name
 if [ $# -eq 1 ]; then
   dpkg -s "$1" > /dev/null 2>&1 && {
          echo "$1 is installed." 
      } || {
      echo "$1 is not installed." 
      $SUDO apt-get install --force-yes $1  
    }
  fi
}

check_gtpu_kmodule_installed() {
  if [ -e /lib/modules/`uname -r`/extra/xt_GTPUSP.ko ]; then
    echo_info "GTPU kernel module installed"
  else
    echo_fatal "GTPU kernel module not installed"
  fi  
}


# arg1 is required minimal version of linux-headers and linux-image
# arg2 is force (no interactive script)
check_kernel_release_and_install_xtables_addons_oai() {
					      
  if [ $2 -gt 0 ]; then 
    OPTION="-y"
  else
    OPTION=""
  fi

  if [ $# -eq 2 ]; then
    current_k_release=`uname -r`
    current_kernel_version=`echo $current_k_release | cut -d '.' -f1`
    current_major_revision=`echo $current_k_release | cut -d '.' -f2`
  
    required_kernel_version=`echo $1 | cut -d '.' -f1`
    required_major_revision=`echo $1 | cut -d '.' -f2`
  
    if [ $current_kernel_version -ne $required_kernel_version ] ||  [ "$current_major_revision" -ne "$required_major_revision" ] ; then
      echo_warning "xtables_addons_oai not installed "
      echo_error "Please (install if necessary and) boot on required kernel: $required_kernel_version.$required_major_revision"
      return
    fi
    dpkg -s "linux-headers-$current_k_release" > /dev/null 2>&1 && {
          echo_info "$current_k_release is installed and suitable for S-GW software." 
          install_xtables_addons_oai $2
      } || {
          echo_warning "Package linux-headers-$current_k_release is not installed and required for S-GW software." 
          $SUDO apt-get install $OPTION linux-headers-$current_k_release  && install_xtables_addons_oai $2
    }
  else
    echo_error "Please provide arguments: kernel ubuntu version and force option"
  fi 
}

update_package_db() {
  if [ ! -f /tmp/no_more_update_package_db ]; then
    $SUDO apt-get update
    touch /tmp/no_more_update_package_db
  else
    let elapsed_time=$(expr `date +%s` - `stat -c %Y /tmp/no_more_update_package_db`)
    if [ $elapsed_time -gt 3600 ]; then
      $SUDO apt-get update
      touch /tmp/no_more_update_package_db
    fi
  fi
}

#arg1 is force (no interactive script)
check_install_hss_software() {
  if [ $1 -gt 0 ]; then 
    OPTION="-y"
  else
    OPTION=""
  fi
  
  # remove incompatible softwares
  $SUDO apt-get purge $OPTION \
    libgnutls-dev  \
    'libgnutlsxx2?'  \
    nettle-dev  \
    nettle-bin
    
  # Compilers, generators, ...
  $SUDO apt-get install $OPTION \
    autoconf  \
    automake  \
    bison     \
    build-essential \
    cmake \
    cmake-curses-gui  \
    doxygen \
    doxygen-gui\
    flex  \
    gdb \
    pkg-config 
    
  $SUDO apt-get install $OPTION \
    git \
    subversion
    
  # Libraries
  $SUDO apt-get install $OPTION \
    libconfig8-dev \
    libgcrypt11-dev \
    libidn2-0-dev \
    libidn11-dev \
    libmysqlclient-dev \
    libpthread-stubs0-dev \
    libsctp1 \
    libsctp-dev \
    libssl-dev \
    libtool \
    mysql-client \
    mysql-server \
    openssl 
    
  install_nettle_from_source $1
  install_gnutls_from_source $1

  install_freediameter_from_source $1
    
  $SUDO apt-get install $OPTION \
    phpmyadmin \
    python-pexpect 
}

#arg1 is force (no interactive script)
check_install_mme_gw_software() {
  if [ $1 -gt 0 ]; then 
    OPTION="-y"
  else
    OPTION=""
  fi
    
  # remove incompatible softwares
  $SUDO apt-get purge $OPTION \
    libgnutls-dev  \
    'libgnutlsxx2?'  \
    nettle-dev  \
    nettle-bin

  # Compilers, generators, ...
  PACKAGE_LIST="\
    autoconf  \
    automake  \
    bison     \
    build-essential \
    cmake \
    cmake-curses-gui  \
    doxygen \
    doxygen-gui\
    flex  \
    gccxml \
    gdb  \
    git \
    pkg-config \
    subversion \
    valgrind"
  $SUDO apt-get install $OPTION $PACKAGE_LIST
  if [ $? -ne 0 ]; then 
    echo_fatal "Failed to install package list $PACKAGE_LIST"
  fi
  
  # Libraries
  PACKAGE_LIST="\
    guile-2.0-dev \
    libconfig8-dev \
    libgcrypt11-dev \
    libgmp-dev \
    libhogweed2 \
    libgtk-3-dev \
    libidn2-0-dev \
    libidn11-dev \
    libpthread-stubs0-dev \
    libsctp1 \
    libsctp-dev \
    libssl-dev \
    libtool \
    libxml2 \
    libxml2-dev \
    mscgen \
    openssl \
    python"
  $SUDO apt-get install $OPTION $PACKAGE_LIST
  if [ $? -ne 0 ]; then 
    echo_fatal "Failed to install package list $PACKAGE_LIST"
  fi 


  install_nettle_from_source $1
  install_gnutls_from_source $1

  install_freediameter_from_source $1
  install_asn1c_from_source $1

  # Networking
  PACKAGE_LIST="\
    ethtool \
    iperf \
    iproute \
    vlan \
    tshark"
  $SUDO apt-get install $OPTION $PACKAGE_LIST
  if [ $? -ne 0 ]; then 
    echo_fatal "Failed to install package list $PACKAGE_LIST"
  fi 
    
  PACKAGE_LIST="\
    check \
    phpmyadmin \
    python-dev \
    python-pexpect \
    unzip"
  $SUDO apt-get install $OPTION $PACKAGE_LIST
  if [ $? -ne 0 ]; then 
    echo_fatal "Failed to install package list $PACKAGE_LIST"
  fi

  check_kernel_release_and_install_xtables_addons_oai 3.19.0-28-generic $1
}

#arg1 is force (no interactive script)
check_install_spgw_software() {
  if [ $1 -gt 0 ]; then 
    OPTION="-y"
  else
    OPTION=""
  fi
    
  # Compilers, generators, ...
  PACKAGE_LIST="\
    autoconf  \
    automake  \
    bison     \
    build-essential \
    cmake \
    cmake-curses-gui  \
    doxygen \
    doxygen-gui\
    flex  \
    gccxml \
    gdb  \
    git \
    pkg-config \
    subversion"
  $SUDO apt-get install $OPTION $PACKAGE_LIST
  if [ $? -ne 0 ]; then 
    echo_fatal "Failed to install package list $PACKAGE_LIST"
  fi
  
  # Libraries
  PACKAGE_LIST="\
    guile-2.0-dev \
    libconfig8-dev \
    libgcrypt11-dev \
    libgmp-dev \
    libhogweed2 \ 
    libgtk-3-dev \
    libidn2-0-dev \
    libidn11-dev \
    libpthread-stubs0-dev \
    libtool \
    libxml2 \
    libxml2-dev \
    mscgen \
    openssl \
    python"
  $SUDO apt-get install $OPTION $PACKAGE_LIST
  if [ $? -ne 0 ]; then 
    echo_fatal "Failed to install package list $PACKAGE_LIST"
  fi 

  # Networking
  PACKAGE_LIST="\
    ethtool \
    iperf \
    iproute \
    vlan \
    tshark"
  $SUDO apt-get install $OPTION $PACKAGE_LIST
  if [ $? -ne 0 ]; then 
    echo_fatal "Failed to install package list $PACKAGE_LIST"
  fi 
    
  PACKAGE_LIST="\
    check \
    python-dev \
    python-pexpect \
    unzip"
  $SUDO apt-get install $OPTION $PACKAGE_LIST
  if [ $? -ne 0 ]; then 
    echo_fatal "Failed to install package list $PACKAGE_LIST"
  fi

  check_kernel_release_and_install_xtables_addons_oai 3.19.0-28-generic $1
}


install_asn1c_from_source(){
  if [ $1 -eq 0 ]; then
    OPTION=""
    read -p "Do you want to install asn1c rev 1516 patched? <y/N> " prompt
  else
    prompt='y'
    OPTION="-y"
  fi

  $SUDO apt-get install $OPTION \
    autoconf  \
    automake  \
    bison     \
    build-essential \
    flex  \
    gcc \
    libtool

  if [[ $prompt =~ [yY](es)* ]]
  then    
    mkdir -p /tmp/asn1c-r1516
    cd /tmp/asn1c-r1516
    rm -rf /tmp/asn1c-r1516/*
    svn co https://github.com/vlm/asn1c/trunk  /tmp/asn1c-r1516 -r 1516 > /tmp/log_compile_asn1c
    patch -p0 < $OPENAIRCN_DIR/SRC/S1AP/MESSAGES/ASN1/asn1cpatch.p0 >> /tmp/log_compile_asn1c
    patch -p0 < $OPENAIRCN_DIR/SRC/S1AP/MESSAGES/ASN1/asn1cpatch_2.p0 >> /tmp/log_compile_asn1c
    patch -p0 < $OPENAIRCN_DIR/SRC/S1AP/MESSAGES/ASN1/asn1cpatch_3.p0 >> /tmp/log_compile_asn1c
    ./configure
    make > /tmp/log_compile_asn1c 2>&1
    $SUDO make install
  fi
}


##################################
# create HSS DB
################################

# arg 1 is mysql admin     (ex: root)
# arg 2 is mysql password  (ex: linux)
# arg 3 is hss username    (ex: hssadmin)
# arg 4 is hss password    (ex: admin)
# arg 5 is database name   (ex: oai_db)
create_hss_database(){
  EXPECTED_ARGS=5
  if [ $# -ne $EXPECTED_ARGS ]
  then
    echo_error "Usage: create_hss_database dbadmin dbpass hssuser hsspass databasename"
    return 1
  fi
  local mysql_admin=$1
  local mysql_password=$2
  local hss_username=$3
  local hss_password=$4
  local database_name=$5
    
  Q1="GRANT ALL PRIVILEGES ON *.* TO '$hss_username'@'localhost' IDENTIFIED BY '$hss_password' WITH GRANT OPTION;"
  Q2="FLUSH PRIVILEGES;"
  mysql -u $mysql_admin --password=$mysql_password -e "${Q1}${Q2}"
  if [ $? -ne 0 ]; then
    echo_error "HSS: $hss_username permissions creation failed"
    echo_error "verify root password for mysql is linux: mysql -u root --password=linux"
    echo_error "if not, reset it to "linux" with sudo dpkg-reconfigure mysql-server-5.5"
    return 1
  else
    echo_success "HSS: $hss_username permissions creation succeeded"
  fi
    
  Q3="CREATE DATABASE IF NOT EXISTS $database_name;"
  mysql -u $hss_username --password=$hss_password -e "${Q3}"
  if [ $? -ne 0 ]; then
    echo_error "HSS: $database_name creation failed"
    return 1
  else
    echo_success "HSS: $database_name creation succeeded"
  fi

    
  # test if tables have been created
  mysql -u $hss_username --password=$hss_password  -e "desc $database_name.users" > /dev/null 2>&1
  if [ $? -eq 1 ]; then 
    mysql -u $hss_username --password=$hss_password $database_name < $OPENAIRCN_DIR/SRC/OPENAIRHSS/db/$database_name.sql
    if [ $? -ne 0 ]; then
      echo_error "HSS: $database_name tables creation failed"
      return 1
    else
      echo_success "HSS: $database_name tables creation succeeded"
    fi
  else
      echo_success "HSS: $database_name tables already created, nothing done"
  fi 
  return 0
}

##################################
# export HSS DB
################################

# arg 1 is hss username    (ex: hssadmin)
# arg 2 is hss password    (ex: admin)
# arg 3 is database name   (ex: oai_db)
# arg 4 is export file name(ex: oai_db_dump.sql)
export_hss_database(){
  EXPECTED_ARGS=4
  if [ $# -ne $EXPECTED_ARGS ]
  then
    echo_error "Usage: export_hss_database hssuser hsspass databasename filename"
    return 1
  fi
  local hss_username=$1
  local hss_password=$2
  local database_name=$3
  local file_name=$4
  
  mysqldump -u $hss_username -p$hss_password $database_name > $file_name 2>&1
  if [ $? -ne 0 ]; then
    echo_error "HSS: $database_name dump failed:"
    cat $file_name
    return 1
  else
    echo_success "HSS: $database_name dump succeeded"
  fi

  return 0
}

##################################
# IMPORT HSS DB
################################

# arg 1 is hss username    (ex: hssadmin)
# arg 2 is hss password    (ex: admin)
# arg 3 is database name   (ex: oai_db)
# arg 4 is import file name(ex: oai_db_dump.sql)
import_hss_database(){
  EXPECTED_ARGS=4
  if [ $# -ne $EXPECTED_ARGS ]
  then
    echo_error "Usage: import_hss_database hssuser hsspass databasename filename"
    return 1
  fi
  local hss_username=$1
  local hss_password=$2
  local database_name=$3
  local file_name=$4
  
  mysqladmin --force -u $hss_username -p$hss_password drop $database_name 
  
  Q1="CREATE DATABASE IF NOT EXISTS $database_name;"
  mysql -u $hss_username --password=$hss_password -e "${Q1}"
  if [ $? -ne 0 ]; then
    echo_error "HSS: $database_name creation failed"
    return 1
  else
    echo_success "HSS: $database_name creation succeeded"
  fi
  
  mysql -u $hss_username -p$hss_password $database_name < $file_name 
  if [ $? -ne 0 ]; then
    echo_error "HSS: $database_name import failed:"
    cat $file_name
    return 1
  else
    echo_success "HSS: $database_name import succeeded"
  fi

  return 0
}


cidr2mask(){
  local i mask=""
  local full_octets=$(($1/8))
  local partial_octet=$(($1%8))

  for ((i=0;i<4;i+=1)); do
    if [ $i -lt $full_octets ]; then
      mask+=255
    elif [ $i -eq $full_octets ]; then
      mask+=$((256 - 2**(8-$partial_octet)))
    else
      mask+=0
    fi
    test $i -lt 3 && mask+=.
  done

  echo $mask
}

# example: netcalc 192.168.12.100 255.255.255.0
netcalc(){
  local IFS='.' ip i
  local -a oct msk
    
  read -ra oct <<<"$1"
  read -ra msk <<<"$2"

  for i in ${!oct[@]}; do
    ip+=( "$(( oct[i] & msk[i] ))" )
  done
    
  echo "${ip[*]}"
}

# example: 
bcastcalc(){
  local IFS='.' ip i
  local -a oct msk
    
  read -ra oct <<<"$1"
  read -ra msk <<<"$2"

  for i in ${!oct[@]}; do
    ip+=( "$(( oct[i] + ( 255 - ( oct[i] | msk[i] ) ) ))" )
  done
  echo "${ip[*]}"
}


is_real_interface(){
  my_bool=1
  for var in "$@"
  do
    if [ "a$var" == "a" ]; then
      return 0
    fi
    if [ "a$var" == "anone" ]; then
      return 0
    fi
    IF=`cat /etc/udev/rules.d/70-persistent-net.rules | grep $var | sed 's/^.*NAME=//' | tr -d '"'`
    if [ "$IF" == "$var" ]; then
      if [ "a${var:0:3}" != "aeth" ]; then
        if [ "a${var:0:4}" != "awlan" ]; then
          if [ "a${var:0:4}" != "awifi" ]; then
            my_bool=0;
          fi
        fi
      fi
    fi
  done
  return $my_bool
}

is_virtual_interface(){
  my_bool=1
  for var in "$@"
  do
    if [ "a$var" == "a" ]; then
      return 0
    fi
    if [ "a$var" == "anone" ]; then
      return 0
    fi
    num=`expr index "$var" :`
    
    if [ $num -eq 0 ]; then
      my_bool=0;
    fi
  done
  return $my_bool
}

# arg1 = interface name
# arg2 = ipv4 addr cidr
set_interface_up(){
  interface=$1
  address=${2%/*} #part before '/'
  cidr_netmask=${2#*/} # part after '/'

  if [ "a${interface:0:4}" == "anone" ]; then
    return;
  fi
  echo "ifconfig  $interface up"
  $SUDO ifconfig  $interface up
  sync
  netmask=`cidr2mask $cidr_netmask`
  broadcast=`bcastcalc $address $netmask`
  echo "ip -4 addr add  $address/$cidr_netmask broadcast $broadcast dev $interface"
  $SUDO ip -4 addr add  $address/$cidr_netmask broadcast $broadcast dev $interface
  sync
}

# arg1 = interface name
# arg2 = ipv4 addr cidr
set_virtual_interface_up(){
  interface=$1
  address=${2%/*} #part before '/'
  cidr_netmask=${2#*/} # part after '/'

  if [ "a${interface:0:4}" == "anone" ]; then
    return;
  fi
  $SUDO ifconfig  $interface down > /dev/null 2>&1
  sync
  echo "ifconfig  $interface $address up"
  $SUDO ifconfig  $interface $address up
  sync
}

#arg1 is interface name
#arg2 is IP address (CIDR)
set_network_interface(){
  local interface_name=$1
  local ip_cidr=$2
  
  is_virtual_interface $interface_name
  if [ $? -eq 1 ]; then
    echo "$interface_name is virtual interface"
    set_virtual_interface_up $interface_name $ip_cidr
  else 
    is_real_interface $interface_name
    if [ $? -eq 1 ]; then
      echo "$interface_name is real interface"
      set_interface_up $interface_name $ip_cidr
    else
      echo_warning "$interface_name not handled, not configuring it"
      return
    fi
  fi
}

# arg1 is MME or EPC config file
set_mme_network_interfaces(){
  value="`cat $1 | cut -d "#" -f1 | grep 'ADDRESS\|INTERFACE' | tr -d " " | grep "="`"
  eval $value
  
  # check all var names are correct
  list_var_name="\
        MME_INTERFACE_NAME_FOR_S1_MME         MME_IPV4_ADDRESS_FOR_S1_MME \
        MME_INTERFACE_NAME_FOR_S11_MME        MME_IPV4_ADDRESS_FOR_S11_MME"
  for var_name in $list_var_name
  do
    if [ -n "$${var_name}" ]; then
      echo_success "Found ${var_name} = ${!var_name}"
    else
      echo_fatal "${var_name} does does not exist in your config file $1"
    fi
  done

  # configure interfaces
  set_network_interface  $MME_INTERFACE_NAME_FOR_S1_MME         $MME_IPV4_ADDRESS_FOR_S1_MME 
  set_network_interface  $MME_INTERFACE_NAME_FOR_S11_MME        $MME_IPV4_ADDRESS_FOR_S11_MME 
}

# arg1 is S/P-GW or EPC config file
set_spgw_network_interfaces(){
  value="`cat $1 | cut -d "#" -f1 | grep 'ADDRESS\|INTERFACE' | tr -d " " | grep "="`"
  eval $value
  
  # check all var names are correct
  list_var_name="\
        SGW_INTERFACE_NAME_FOR_S11            SGW_IPV4_ADDRESS_FOR_S11 \
        SGW_INTERFACE_NAME_FOR_S1U_S12_S4_UP  SGW_IPV4_ADDRESS_FOR_S1U_S12_S4_UP \
        SGW_INTERFACE_NAME_FOR_S5_S8_UP       SGW_IPV4_ADDRESS_FOR_S5_S8_UP \
        PGW_INTERFACE_NAME_FOR_S5_S8          PGW_IPV4_ADDRESS_FOR_S5_S8 \
        PGW_INTERFACE_NAME_FOR_SGI            PGW_IPV4_ADDRESS_FOR_SGI"
  for var_name in $list_var_name
  do
    if [ -n "$${var_name}" ]; then
      echo_success "Found ${var_name} = ${!var_name}"
    else
      echo_fatal "${var_name} does does not exist in your config file $1"
    fi
  done

  # configure interfaces
  set_network_interface  $SGW_INTERFACE_NAME_FOR_S11            $SGW_IPV4_ADDRESS_FOR_S11 
  set_network_interface  $SGW_INTERFACE_NAME_FOR_S1U_S12_S4_UP  $SGW_IPV4_ADDRESS_FOR_S1U_S12_S4_UP 
  set_network_interface  $SGW_INTERFACE_NAME_FOR_S5_S8_UP       $SGW_IPV4_ADDRESS_FOR_S5_S8_UP 
  set_network_interface  $PGW_INTERFACE_NAME_FOR_S5_S8          $PGW_IPV4_ADDRESS_FOR_S5_S8 
  set_network_interface  $PGW_INTERFACE_NAME_FOR_SGI            $PGW_IPV4_ADDRESS_FOR_SGI
}

# arg1 is EPC config file
set_epc_network_interfaces(){
  set_mme_network_interfaces $1
  set_spgw_network_interfaces $1
}

# arg1 is a 'libconfig-like' config file
set_enb_network_interfaces(){
  value="`cat $1 | cut -d "#" -f1 | grep 'ADDRESS\|INTERFACE' | tr -d " " | grep "="`"
  eval $value
  
  # check all var names are correct
  list_var_name="\
        ENB_INTERFACE_NAME_FOR_S1_MME         ENB_IPV4_ADDRESS_FOR_S1_MME \
        ENB_INTERFACE_NAME_FOR_S1U            ENB_IPV4_ADDRESS_FOR_S1U "
  for var_name in $list_var_name
  do
    if [ -n "$${var_name}" ]; then
      echo_success "Found ${var_name} = ${!var_name}"
    else
      echo_fatal "${var_name} does does not exist in your config file $1"
    fi
  done

  # configure interfaces
  set_network_interface  $ENB_INTERFACE_NAME_FOR_S1_MME         $ENB_IPV4_ADDRESS_FOR_S1_MME 
  set_network_interface  $ENB_INTERFACE_NAME_FOR_S1U            $ENB_IPV4_ADDRESS_FOR_S1U 
}

################################
# set_openair_env
###############################
set_openair_env(){
    fullpath=`readlink -f $BASH_SOURCE`
    [ -f "/.$fullpath" ] || fullpath=`readlink -f $PWD/$fullpath`
    openair_path=${fullpath%/BUILD/*}
    openair_path=${openair_path%/DOCS/*}
    openair_path=${openair_path%/SRC/NAS/*}
    openair_path=${openair_path%/SRC/S6A/*}
    export OPENAIRCN_DIR=$openair_path
}


################################
# send ctrl-c and finally force terminate the program and all its child processes
###############################

function handle_ctrl_c(){
CURPID=$$
ppid=$$
arraycounter=1
echo_info "** Trapped CTRL-C. Killing all subprocesses now..."
while true
do
        FORLOOP=FALSE
        # Get all the child process id
        for i in `ps -ef| awk '$3 == '$ppid' { print $2 }'`
        do
                if [ $i -ne $CURPID ] ; then
                        procid[$arraycounter]=$i
                        arraycounter=`expr $arraycounter + 1`
                        ppid=$i
                        FORLOOP=TRUE
                fi
        done
        if [ "$FORLOOP" = "FALSE" ] ; then
           arraycounter=`expr $arraycounter - 1`
           ## We want to kill child process id first and then parent id's
           while [ $arraycounter -ne 0 ]
           do
             echo "first we send ctrl-c to program"
             $SUDO kill -INT "${procid[$arraycounter]}"
             sleep 5
             echo "Now we force kill if that didn't work"
             $SUDO kill -9 "${procid[$arraycounter]}"
             arraycounter=`expr $arraycounter - 1`
           done
         exit
        fi
done
}

