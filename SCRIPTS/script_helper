################################################################################
# Licensed to the OpenAirInterface (OAI) Software Alliance under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The OpenAirInterface Software Alliance licenses this file to You under 
# the Apache License, Version 2.0  (the "License"); you may not use this file
# except in compliance with the License.  
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#-------------------------------------------------------------------------------
# For more information about the OpenAirInterface (OAI) Software Alliance:
#      contact@openairinterface.org
################################################################################

# file script_helper
# brief
# author Laurent Thomas, Lionel GAUTHIER
#
#######################################
SUDO='sudo -S -E'

###############################
## echo and  family
###############################
black='\E[30m'
red='\E[31m'
green='\E[32m'
yellow='\E[33m'
blue='\E[1;34m'
magenta='\E[35m'
cyan='\E[36m'
white='\E[37m'
reset_color='\E[00m'
COLORIZE=1

cecho()  {  
    # Color-echo
    # arg1 = message
    # arg2 = color
    local default_msg="No Message."
    message=${1:-$default_msg}
    color=${2:-$green}
    [ "$COLORIZE" = "1" ] && message="$color$message$reset_color"
    echo -e "$message"
    return
}

echo_error()   { cecho "$*" $red          ;}
echo_fatal()   { cecho "$*" $red; exit -1 ;}
echo_warning() { cecho "$*" $yellow       ;}
echo_success() { cecho "$*" $green        ;}
echo_info()    { cecho "$*" $blue         ;}



###########################
# Cleaners
###########################

clean_kernel() {
    $SUDO modprobe ip_tables
    $SUDO modprobe x_tables
    $SUDO iptables -P INPUT ACCEPT
    $SUDO iptables -F INPUT
    $SUDO iptables -P OUTPUT ACCEPT
    $SUDO iptables -F OUTPUT
    $SUDO iptables -P FORWARD ACCEPT
    $SUDO iptables -F FORWARD
    $SUDO iptables -t nat -F
    $SUDO iptables -t mangle -F
    $SUDO iptables -t filter -F
    $SUDO iptables -t raw -F
    echo_info "Flushed iptables"
}



# arg1 is package name
test_install_package() {
  # usage: test_install_package package_name
 if [ $# -eq 1 ]; then
   dpkg -s "$1" > /dev/null 2>&1 && {
          echo "$1 is installed." 
      } || {
      echo "$1 is not installed." 
      $SUDO apt-get install --force-yes $1  
    }
  fi
}


check_gtpu_kmodule_installed() {
  if [ -e /lib/modules/`uname -r`/extra/xt_GTPUSP.ko ]; then
    echo_info "GTPU kernel module installed"
  else
    echo_fatal "GTPU kernel module not installed"
  fi  
}


update_package_db() {
  if [ ! -f /tmp/no_more_update_package_db ]; then
    $SUDO apt-get update
    touch /tmp/no_more_update_package_db
  else
    let elapsed_time=$(expr `date +%s` - `stat -c %Y /tmp/no_more_update_package_db`)
    if [ $elapsed_time -gt 3600 ]; then
      $SUDO apt-get update
      touch /tmp/no_more_update_package_db
    fi
  fi
}


##################################
# create HSS DB
################################

# arg 1 is mysql admin     (ex: root)
# arg 2 is mysql password  (ex: linux)
# arg 3 is hss username    (ex: hssadmin)
# arg 4 is hss password    (ex: admin)
# arg 5 is database name   (ex: oai_db)
create_hss_database(){
  EXPECTED_ARGS=5
  if [ $# -ne $EXPECTED_ARGS ]
  then
    echo_error "Usage: create_hss_database dbadmin dbpass hssuser hsspass databasename"
    return 1
  fi
  local mysql_admin=$1
  local mysql_password=$2
  local hss_username=$3
  local hss_password=$4
  local database_name=$5
    
  Q1="GRANT ALL PRIVILEGES ON *.* TO '$hss_username'@'localhost' IDENTIFIED BY '$hss_password' WITH GRANT OPTION;"
  Q2="FLUSH PRIVILEGES;"
  mysql -u $mysql_admin --password=$mysql_password -e "${Q1}${Q2}"
  if [ $? -ne 0 ]; then
    echo_error "HSS: $hss_username permissions creation failed"
    echo_error "verify root password for mysql is linux: mysql -u root --password=linux"
    echo_error "if not, reset it to "linux" with sudo dpkg-reconfigure mysql-server-5.5"
    return 1
  else
    echo_success "HSS: $hss_username permissions creation succeeded"
  fi
    
  Q3="CREATE DATABASE IF NOT EXISTS $database_name;"
  mysql -u $hss_username --password=$hss_password -e "${Q3}"
  if [ $? -ne 0 ]; then
    echo_error "HSS: $database_name creation failed"
    return 1
  else
    echo_success "HSS: $database_name creation succeeded"
  fi

    
  # test if tables have been created
  mysql -u $hss_username --password=$hss_password  -e "desc $database_name.users" > /dev/null 2>&1
  if [ $? -eq 1 ]; then 
    mysql -u $hss_username --password=$hss_password $database_name < $OPENAIRCN_DIR/SRC/OPENAIRHSS/db/$database_name.sql
    if [ $? -ne 0 ]; then
      echo_error "HSS: $database_name tables creation failed"
      return 1
    else
      echo_success "HSS: $database_name tables creation succeeded"
    fi
  else
      echo_success "HSS: $database_name tables already created, nothing done"
  fi 
  return 0
}

##################################
# export HSS DB
################################

# arg 1 is hss username    (ex: hssadmin)
# arg 2 is hss password    (ex: admin)
# arg 3 is database name   (ex: oai_db)
# arg 4 is export file name(ex: oai_db_dump.sql)
export_hss_database(){
  EXPECTED_ARGS=4
  if [ $# -ne $EXPECTED_ARGS ]
  then
    echo_error "Usage: export_hss_database hssuser hsspass databasename filename"
    return 1
  fi
  local hss_username=$1
  local hss_password=$2
  local database_name=$3
  local file_name=$4
  
  mysqldump -u $hss_username -p$hss_password $database_name > $file_name 2>&1
  if [ $? -ne 0 ]; then
    echo_error "HSS: $database_name dump failed:"
    cat $file_name
    return 1
  else
    echo_success "HSS: $database_name dump succeeded"
  fi

  return 0
}

##################################
# IMPORT HSS DB
################################

# arg 1 is hss username    (ex: hssadmin)
# arg 2 is hss password    (ex: admin)
# arg 3 is database name   (ex: oai_db)
# arg 4 is import file name(ex: oai_db_dump.sql)
import_hss_database(){
  EXPECTED_ARGS=4
  if [ $# -ne $EXPECTED_ARGS ]
  then
    echo_error "Usage: import_hss_database hssuser hsspass databasename filename"
    return 1
  fi
  local hss_username=$1
  local hss_password=$2
  local database_name=$3
  local file_name=$4
  
  mysqladmin --force -u $hss_username -p$hss_password drop $database_name 
  
  Q1="CREATE DATABASE IF NOT EXISTS $database_name;"
  mysql -u $hss_username --password=$hss_password -e "${Q1}"
  if [ $? -ne 0 ]; then
    echo_error "HSS: $database_name creation failed"
    return 1
  else
    echo_success "HSS: $database_name creation succeeded"
  fi
  
  mysql -u $hss_username -p$hss_password $database_name < $file_name 
  if [ $? -ne 0 ]; then
    echo_error "HSS: $database_name import failed:"
    cat $file_name
    return 1
  else
    echo_success "HSS: $database_name import succeeded"
  fi

  return 0
}





