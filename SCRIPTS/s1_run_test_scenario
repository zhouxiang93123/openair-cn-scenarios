#!/bin/bash
################################################################################
# Licensed to the OpenAirInterface (OAI) Software Alliance under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The OpenAirInterface Software Alliance licenses this file to You under 
# the Apache License, Version 2.0  (the "License"); you may not use this file
# except in compliance with the License.  
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#-------------------------------------------------------------------------------
# For more information about the OpenAirInterface (OAI) Software Alliance:
#      contact@openairinterface.org
################################################################################
# file s1_run_test_scenario
# brief
# author Lionel Gauthier
# company Eurecom
# email: lionel.gauthier@eurecom.fr
# 
# This script run the network scenario contained in the specified folder given in argument
################################
# include helper functions
################################
THIS_SCRIPT_PATH=$(dirname $(readlink -f $0))
source $THIS_SCRIPT_PATH/script_helper

export HSS_S6A_IP="192.176.6.1"
export HSS_S6A_INTERFACE_NAME="s6ahss"
export MME_S6A_IP="192.176.6.2"
export MME_S6A_INTERFACE_NAME="s6amme"

function main()
{
  if [ "a$OPENAIRCN_DIR" == "a" ] ; then
    read -p "Please enter the path of the openair-cn source tree ? " TMP_DIR
    export OPENAIRCN_DIR=`realpath $TMP_DIR`
    echo "OPENAIRCN_DIR="$OPENAIRCN_DIR
  fi
  

  if [ "a$OPENAIRCN_DIR" = "a" ]; then 
    echo_fatal "OPENAIRCN_DIR does not refer to a valid dir: $OPENAIRCN_DIR"
  fi
 
  if [ ! -d "$OPENAIRCN_DIR" ]; then
    echo_fatal "OPENAIRCN_DIR does not refer to a valid dir: $OPENAIRCN_DIR"
  fi
  export OPENAIRCN_DIR="$OPENAIRCN_DIR"

  SCENARIO_DIR=""
  if [ ! -z "$1" ]; then
    if [ ! -d $1 ]; then
      echo_fatal "Error: Please provide a valid path to the desired test scenario dir" 
    fi
    
    cd $1
  fi
  SCENARIO_DIR=$(pwd)
  #scenario name the last dirname in the scenario directory path
  SCENARIO_NAME=${SCENARIO_DIR##*/}
  


  $THIS_SCRIPT_PATH/s1_prepare_test_scenario

  if [ ! -f "./enb.replay.conf" ] ; then
      echo_fatal "Error: Did not found the required file (./enb.replay.conf) for running the scenario in `pwd`" 
  fi
  if [ ! -f "./mme.replay.conf" ] ; then
    echo_fatal "Error: Did not found the required file (./mme.replay.conf) for running the scenario in `pwd`" 
  fi
  $SUDO  sed -i "s/\@TEST-NAME\@/$SCENARIO_NAME/g" ./mme.replay.conf

  if [ ! -f "./spgw.replay.conf" ] ; then
    echo_fatal "Error: Did not found the required file (./spgw.replay.conf) for running the scenario in `pwd`" 
  fi
  if [ ! -f "./s1.xml" ] ; then
      echo_fatal "Error: Did not found the required file (./s1.xml) for running the scenario in `pwd`" 
  fi
  if [ ! -f "./hss_db.replay.sql" ] ; then
      echo_fatal "Error: Did not found the required file (./hss_db.replay.sql) for running the scenario in `pwd`" 
  fi
  
  
  
  $SUDO mkdir -p -m 755 /usr/local/etc/oai_test_$SCENARIO_NAME/freeDiameter > /dev/null
  
  if [ ! -f /usr/local/etc/oai_test_$SCENARIO_NAME/hss.conf ]; then
    $SUDO cp -upv $THIS_SCRIPT_PATH/../ETC/hss.conf    /usr/local/etc/oai_test_$SCENARIO_NAME
    $SUDO  sed -i "s/\@TEST-NAME\@/$SCENARIO_NAME/g" /usr/local/etc/oai_test_$SCENARIO_NAME/hss.conf
    echo_fatal "Please customize /usr/local/etc/oai_test_$SCENARIO_NAME/hss.conf"
  else
    if [  $THIS_SCRIPT_PATH/../ETC/hss.conf -nt  /usr/local/etc/oai_test_$SCENARIO_NAME/hss.conf ]; then
      read -p "Do you want to update /usr/local/etc/oai_test_$SCENARIO_NAME/hss.conf? <y/N> " prompt
      if [[ $prompt =~ [yY](es)* ]]; then
        $SUDO cp -upv $THIS_SCRIPT_PATH/../ETC/hss.conf    /usr/local/etc/oai_test_$SCENARIO_NAME
        echo_fatal "Please customize /usr/local/etc/oai_test_$SCENARIO_NAME/hss.conf"
      fi
    fi
  fi 
  
  
  #########################
  # do networking config
  #########################
  $THIS_SCRIPT_PATH/prepare_interfaces --on
  
    $SUDO ip link add $ENB_INTERFACE_NAME_FOR_S1_MME type veth peer name $MME_INTERFACE_NAME_FOR_S1_MME
  #########################

  
  
  $SUDO cp -upv $THIS_SCRIPT_PATH/../ETC/acl.conf    /usr/local/etc/oai_test_$SCENARIO_NAME/freeDiameter
  $SUDO cp -upv $THIS_SCRIPT_PATH/../ETC/hss_fd.conf /usr/local/etc/oai_test_$SCENARIO_NAME/freeDiameter
  $SUDO  sed -i "s/\@TEST-NAME\@/$SCENARIO_NAME/g" /usr/local/etc/oai_test_$SCENARIO_NAME/freeDiameter/hss_fd.conf
  
  
  # Set the host FQDN to MME diameter Identity
  $SUDO cp -upv $THIS_SCRIPT_PATH/../ETC/mme_fd.conf /usr/local/etc/oai_test_$SCENARIO_NAME/freeDiameter
  HOST_FQDN=`hostname --fqdn`
  DIAM_ID=$(cat /usr/local/etc/oai_test_$SCENARIO_NAME/freeDiameter/mme_fd.conf | grep Identity | cut -d '=' -f2 | cut -d '"' -f2)
  DIAM_ID=$DIAM_ID
  $SUDO  sed -i "s/$DIAM_ID/$HOST_FQDN/g" /usr/local/etc/oai_test_$SCENARIO_NAME/freeDiameter/mme_fd.conf
  $SUDO  sed -i "s/\@TEST-NAME\@/$SCENARIO_NAME/g" /usr/local/etc/oai_test_$SCENARIO_NAME/freeDiameter/mme_fd.conf
  $SUDO  sed -i "s/\@HSS-IP\@/$HSS_S6A_IP/g" /usr/local/etc/oai_test_$SCENARIO_NAME/freeDiameter/mme_fd.conf


  # hardcoded HSS diameter ID 
  IP_ADDRESS=`getent hosts hss-test.openair4G.eur | cut -d ' ' -f1`
  if [ "a$IP_ADDRESS" == "a" ]; then
    echo '127.0.1.1        hss-test.openair4G.eur hss-test' | $SUDO tee -a  /etc/hosts
  else
    if [ "127.0.1.1"  != "$IP_ADDRESS" ]; then
      echo_warning "FQDN hss-test.openair4G.eur resolution is the following: $IP_ADDRESS (better to use 127.0.1.1)"
    fi
  fi

  # generate certificates if necessary
  $SUDO $OPENAIRCN_DIR/SCRIPTS/check_hss_s6a_certificate /usr/local/etc/oai_test_$SCENARIO_NAME/freeDiameter hss-test.openair4G.eur
  $SUDO $OPENAIRCN_DIR/SCRIPTS/check_mme_s6a_certificate /usr/local/etc/oai_test_$SCENARIO_NAME/freeDiameter $HOST_FQDN
  

    # may be you want to speed up the run of the scenario if not optimized (capture with real UE)
  run_option=""
  if [ -f "./enb.replay.run_options.txt" ]; then
    run_options=$(< ./enb.replay.run_options.txt)
  fi
    

  
  #########################
  # START HSS
  #########################
  #$OPENAIRCN_DIR/SCRIPTS/run_hss  --import-db ./hss_db.replay.sql --config-file /usr/local/etc/oai_test_$SCENARIO_NAME/hss.conf --daemon
  #sleep 4 # TODO better than that
  
  #########################
  # START MME
  #########################
  $OPENAIRCN_DIR/SCRIPTS/run_mme --daemon --config-file $SCENARIO_DIR/mme.replay.conf
  
  #########################
  # WAIT MME READY
  #########################
  while [  ! -f /var/run/mmed.pid ]; do
    echo_warning "Waiting for /var/run/mmed.pid creation"
    sleep 1
  done
  MME_PID=$(cat /var/run/mmed.pid)
  STATUS_FILENAME="/tmp/mme_"$MME_PID".status"
  declare -i COUNT=0
  while [  ! -f $STATUS_FILENAME ] && [ $COUNT -lt 10 ]; do
    echo_warning "Waiting for $STATUS_FILENAME creation"
    COUNT=$(($COUNT+1))
    sleep 1
  done
  STATUS=$(cat $STATUS_FILENAME)
  ########################
  # MME FAILED ?
  #########################
  if [ "a$STATUS" != "aSTARTED" ]; then
    # CLEANING
    $OPENAIRCN_DIR/SCRIPTS/run_hss --kill
    $OPENAIRCN_DIR/SCRIPTS/run_mme --kill
    $OPENAIRCN_DIR/SCRIPTS/run_spgw --kill
    # undo networking config
    $THIS_SCRIPT_PATH/prepare_interfaces --off
    echo_fatal "ERROR: mme not started"
  else
    echo_success "mme started"
  fi
  
  #########################
  # START SPGW
  #########################
  $OPENAIRCN_DIR/SCRIPTS/run_spgw --daemon --config-file $SCENARIO_DIR/spgw.replay.conf
  
  #########################
  # WAIT SPGW READY
  #########################
  while [  ! -f /var/run/spgwd.pid ]; do
    echo_warning "Waiting for /var/run/spgwd.pid creation"
    sleep 1
  done
  MME_PID=$(cat /var/run/spgwd.pid)
  STATUS_FILENAME="/tmp/mme_"$SPGW_PID".status"
  declare -i COUNT=0
  while [  ! -f $STATUS_FILENAME ] && [ $COUNT -lt 10 ]; do
    echo_warning "Waiting for $STATUS_FILENAME creation"
    COUNT=$(($COUNT+1))
    sleep 1
  done
  STATUS=$(cat $STATUS_FILENAME)
  ########################
  # SPGW FAILED ?
  #########################
  if [ "a$STATUS" != "aSTARTED" ]; then
    # CLEANING
    $OPENAIRCN_DIR/SCRIPTS/run_hss --kill
    $OPENAIRCN_DIR/SCRIPTS/run_mme --kill
    $OPENAIRCN_DIR/SCRIPTS/run_spgw --kill
    # undo networking config
    $THIS_SCRIPT_PATH/prepare_interfaces --off
    echo_fatal "ERROR: spgw not started"
  else
    echo_success "spgw started"
  fi

  
  #########################  
  # run XML scenario file
  #########################
  echo_success "Running test `pwd`"
  test_epc --run --set-nw-interfaces --test-dir . --enb-config-file enb.replay.conf --scenario-file s1.xml $run_options
    
  ########################
  # CLEANING
  #########################
  $OPENAIRCN_DIR/SCRIPTS/run_spgw --kill
  $OPENAIRCN_DIR/SCRIPTS/run_mme --kill
  $OPENAIRCN_DIR/SCRIPTS/run_hss --kill
  # undo networking config
  $THIS_SCRIPT_PATH/prepare_interfaces --off
}

main "$@"
